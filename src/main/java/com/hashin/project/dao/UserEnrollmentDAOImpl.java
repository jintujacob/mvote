package com.hashin.project.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;
import javax.security.sasl.SaslException;
import javax.sql.DataSource;

import org.apache.log4j.Logger;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.hashin.project.bean.AdhaarUserBean;
import com.hashin.project.bean.VotersAdhaarUserBean;
import com.hashin.project.bean.VotersUserBean;
import com.hashin.project.util.AdhaarRowMapper;
import com.hashin.project.util.VotersRowMapper;

public class UserEnrollmentDAOImpl implements UserEnrollmentDAO
{
    
    private static final Logger logger = Logger.getLogger(UserEnrollmentDAOImpl.class);
    private JdbcTemplate jdbcTemplate;
    
    @Resource(name="dataSource")
    public void setDataSource(DataSource dataSource)
    {
	this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    
    @Override
    public AdhaarUserBean getAdhaarUserById(String adhaarID)
    {
	String query = "select * from adhaarDB where adhaar_id= ?";
	Object[] parameters = new Object[] {adhaarID};
	List<AdhaarUserBean> userList= jdbcTemplate.query(query, parameters, new AdhaarRowMapper());

	logger.debug("UserEnrollmentDaoImpl #getAdhaarUserById Query=> executed" );
	logger.debug("UserEnrollmentDaoImpl #getAdhaarUserById result => "+ userList.get(0).getNameFirst());
	return userList.get(0);    
    }


    @Override
    public VotersUserBean getVoterUserById(String voterID)
    {
	String query = "select * from voters where voters_id= ?";
	Object[] parameters = new Object[] {voterID};
	List<VotersUserBean> userList= jdbcTemplate.query(query, parameters, new VotersRowMapper());

	logger.debug("UserEnrollmentDaoImpl #getVoterUserById Query=> executed" );
	logger.debug("UserEnrollmentDaoImpl #getVoterUserById result => "+ userList.get(0).getConstituency());
	return userList.get(0);        
    }


    @Override
    public Long createVotersAdhaarUser(final VotersAdhaarUserBean userToEnroll)
    {
	KeyHolder keyHolder = new GeneratedKeyHolder();;
	jdbcTemplate.update(
                new PreparedStatementCreator()  {
                    public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
                        PreparedStatement ps = connection.prepareStatement
                        	( " insert into voters_adhaar " +
                       		  " (id, fk_voters_id, fk_adhaar_id, voting_pin, lockout_flag, gen_date) " +
                        	  " values (NULL, ?, ?, ?, ?, CURDATE())"
                        	  , new String[] {"id"}
                        	);
                        ps.setString(1, userToEnroll.getVotersId());
                        ps.setString(2, userToEnroll.getAdhaarId());
                        ps.setString(3, userToEnroll.getVotingPIN());
                        ps.setString(4, userToEnroll.getLockOutFlag());
                        
                        return ps;
                    }
                },
                keyHolder);
	
	logger.debug("Autogenerated key"+ keyHolder.getKey());

	/*------------------------------------------------------------------------ old code
	String query = "insert into voters_adhaar " +
			"(fk_voters_id, fk_adhaar_id, voting_pin, lockout_flag, gen_date) " +
			"values (?, ?, ?, ?, CURDATE())";
	Object[] parameters = new Object[] {
					userToEnroll.getVotersId(),
					userToEnroll.getAdhaarId(),
					userToEnroll.getVotingPIN(),
					userToEnroll.getLockOutFlag(),
                        };
	jdbcTemplate.update( query, parameters, keyHolder);
	
	---------------------------------------------------------------------endf old code*/
	
	return keyHolder.getKey().longValue();
    }
    

    @Override
    public String generateVotingPin()
    {
	//call the DB function that returns the unique voting PIN,
	//voting PIN should be generated by the database, 
	//it should not be incremented
	//it should be alpha numeric
	
	return null;
    }



}
