package com.hashin.project.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;
import javax.security.sasl.SaslException;
import javax.sql.DataSource;

import org.apache.log4j.Logger;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.hashin.project.bean.AdhaarUserBean;
import com.hashin.project.bean.VotersAdhaarUserBean;
import com.hashin.project.bean.VotersUserBean;
import com.hashin.project.util.AdhaarRowMapper;
import com.hashin.project.util.VotersAdhaarRowMapper;
import com.hashin.project.util.VotersRowMapper;

public class UserEnrollmentDAOImpl implements UserEnrollmentDAO {

	private static final Logger logger = Logger
			.getLogger(UserEnrollmentDAOImpl.class);
	private JdbcTemplate jdbcTemplate;

	@Resource(name = "dataSource")
	public void setDataSource(DataSource dataSource) {
		this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	@Override
	public AdhaarUserBean getAdhaarUserById(String adhaarID) {
		List<AdhaarUserBean> userList = null;
		Object[] parameters = new Object[] { adhaarID };

		userList = jdbcTemplate.query(
				SQLConstants.GET_ADHAAR_USER_BY_ADHAAR_ID, parameters,
				new AdhaarRowMapper());

		logger.debug("UserEnrollmentDaoImpl #getAdhaarUserById Query=> executed");
		logger.debug("UserEnrollmentDaoImpl #getAdhaarUserById resultCount => "
				+ userList.size());
		if (userList.size() == 0) {
			return null;
		}

		return userList.get(0);
	}

	@Override
	public Long createVotersAdhaarUser(final VotersAdhaarUserBean userToEnroll) {
		logger.debug("___________________createVotersAdhaarUser");
		Long e_election_id = null;

		try {
			KeyHolder keyHolder = new GeneratedKeyHolder();
			jdbcTemplate.update(new PreparedStatementCreator() {
				public PreparedStatement createPreparedStatement(
						Connection connection) throws SQLException {
					PreparedStatement ps = connection.prepareStatement(
							SQLConstants.INSERT_ENRLD_USER_IN_VOTERSADHAAR,
							new String[] { "e_election_id" });
					ps.setString(1, userToEnroll.getVotersId());
					ps.setString(2, userToEnroll.getAdhaarId());
					ps.setString(3, userToEnroll.getVotingPIN());
					ps.setString(4, userToEnroll.getLockOutFlag());

					return ps;
				}
			}, keyHolder);

			e_election_id = keyHolder.getKey().longValue();
			logger.debug("_____________________________________________Autogenerated key >>  "
					+ e_election_id);
			return e_election_id;
		} catch (Exception e) {
			logger.debug("________________DAO Exception User already enrolled >> ");
			return null;
		}
	}

	@Override
	public int getEnrollmentStatus(String votingPin, String adhaarId,
			String voterId) {

		logger.debug("____________________________InDAO recieved" + votingPin
				+ adhaarId + voterId);
		
		Object[] parameters = new Object[] { adhaarId, voterId, votingPin };
		int rowCount = jdbcTemplate.queryForInt(
				SQLConstants.GET_ENRLMENT_STAT_BY_ALL_CRITERIA, parameters);
		return rowCount;
	}

	
	@Override
	public int udpateVotersAdhaarUserByPIN(VotersAdhaarUserBean userToUpdate) 
	{	
		logger.debug("______________________________Inside DAO>udpateVotersAdhaarUserByPIN");
		
		int numRows = 0;
		Object[] parameters = new Object[] { 
				userToUpdate.getVotingPIN(),
				userToUpdate.geteElectionId(),
				userToUpdate.getAdhaarId()
			};
		
		numRows = jdbcTemplate.update(SQLConstants.UPDATE_PIN_FOR_ENRLD_USR_VTRS_ADHR, parameters);
		return numRows;
	}

	
	
	@Override
	public VotersAdhaarUserBean getEnrolledUserDetail(
			VotersAdhaarUserBean userToFind) {
		logger.debug("______________________________Inside DAO methode");
		
		List<VotersAdhaarUserBean> userList = null;
		Object[] parameters = new Object[] { 
				userToFind.geteElectionId(),
				userToFind.getAdhaarId()
			};
		
		userList = jdbcTemplate.query(SQLConstants.GET_USR_ENRLMNT_DETAIL, parameters,
				new VotersAdhaarRowMapper());
		
		logger.debug("__________UserEnrollmentDaoImpl #getEnrolledUserDetail "
				+ "resultCount => "+userList.size());
		if(userList.size()==0){
			return null;
		}
		return userList.get(0);
	}
}
