package com.hashin.project.controller;

import java.util.List;

import javax.jws.WebParam.Mode;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.hashin.project.bean.AdhaarUserBean;
import com.hashin.project.bean.ElectionsBean;
import com.hashin.project.bean.VotersAdhaarUserBean;
import com.hashin.project.bean.VotersUserBean;
import com.hashin.project.service.UserEnrollmentService;
import com.hashin.project.service.VoterListManagementService;


/**
 * @author jintu.jacob@gmail.com
 * Oct 9, 2013
 * UserEnrollmentManager
 * Handles all default inputs ending with /enroll
 */

@Controller
@RequestMapping("/enroll")
public class UserEnrollmentManager
{
    @Autowired
    private VoterListManagementService voterListMgmtService; 

    @Autowired
    private UserEnrollmentService userEnrollmentService; 
    private static final Logger logger = Logger.getLogger(UserEnrollmentManager.class);
    private static final String CUSTOM_MSG = "SUCCESS" ;
    
    @RequestMapping(method = RequestMethod.GET)
    public ModelAndView getHomeAction() 
    {
	logger.debug("in UserEnrollmentManager default");
	return null;
    }   
    
    
    //get Adhaar information for the provided adhaarId
    @RequestMapping(value="/getAdhaarInfo", method = RequestMethod.POST)
    public @ResponseBody AdhaarUserBean getAdhaarInfobyId(@RequestBody AdhaarUserBean formBean)
    {
	AdhaarUserBean adhaarDetail = null;
	AdhaarUserBean uiResponse =  new AdhaarUserBean();
	
	adhaarDetail =  userEnrollmentService.getAdhaarUserById(formBean.getAdhaarID());
	
	if(adhaarDetail != null){
	    uiResponse = adhaarDetail;
	    uiResponse.setCustomMessage(CUSTOM_MSG);
	}
	else{
	    uiResponse.setCustomMessage("User not found in Adhaar Database! Please search again");
	}
	return uiResponse;
    }
    
    
    
    @RequestMapping(value="/getVoterInfoById", method = RequestMethod.POST)
    public @ResponseBody VotersUserBean  getVoterInfoById(@RequestBody VotersUserBean voterToSearch)
    {
	logger.debug(">>__________________recieved query params:"+ voterToSearch.getVotersId() );

	VotersUserBean voterDetail =  null;
	VotersUserBean uiResponse =  new VotersUserBean();
	
	voterDetail = voterListMgmtService.getVoterDetailById(voterToSearch);
	
	if(voterDetail != null){
	    uiResponse = voterDetail;
	    uiResponse.setCustomMessage(CUSTOM_MSG);
	}
	else{
	    uiResponse.setCustomMessage("No results for the search. Please search again! ");
	}
	return uiResponse;
    }



    /* Once the VotersInfo from /getVotersInfo and adhaarInformation from /getAdhaarInfo
     * are verified enroll the user, enrollment tables requires only voterId and adhaarId
     */
    @RequestMapping(value="/enrollUser", method = RequestMethod.POST)
    public @ResponseBody VotersAdhaarUserBean generateElectionId(@RequestBody VotersAdhaarUserBean verifiedUser)
    {
	logger.debug(">>________ VoterId recieved > " + verifiedUser.getVotersId());
	
/*	VotersAdhaarUserBean user =   userEnrollmentService.manageUserEnrollement(verifiedUser.getVotersId(), 
		verifiedUser.getAdhaarId()) ;
*/	
	VotersAdhaarUserBean enrolledUser= new VotersAdhaarUserBean();
	enrolledUser.setAdhaarId(verifiedUser.getAdhaarId());
	enrolledUser.setVotersId(verifiedUser.getVotersId());
	enrolledUser.seteElectionId("GENERATED_ID");
	enrolledUser.setCustomMessage(CUSTOM_MSG);
	return enrolledUser;
    }
    
    
    /* LoginWith Election Id */
    @RequestMapping(value="/pinManagerLogin", method = RequestMethod.POST)
    public @ResponseBody VotersAdhaarUserBean getUserPinById(@RequestBody VotersAdhaarUserBean user)
    {
	//sent user.eElectionId to retrieve the autogenerated PIN 
	// if the the Voting PIN is empty on the database, generate one and return
	// if the voting pin is already on db, return that.
	
	logger.debug(">>________________ Recieved > " + user.geteElectionId() + "," + user.getAdhaarId());
	
	VotersAdhaarUserBean enrolledUser= new VotersAdhaarUserBean();
	enrolledUser.setVotingPIN("AUTO GEN PIN");
	enrolledUser.setCustomMessage(CUSTOM_MSG);
	return enrolledUser;
    }

    
    
    /* chnage pin for Election Id */
    @RequestMapping(value="/changePinById", method = RequestMethod.POST)
    public @ResponseBody VotersAdhaarUserBean changeUserPin(@RequestBody VotersAdhaarUserBean newUser)
    {
	logger.debug(">>________________ Recieved >" + newUser.geteElectionId() + "," + newUser.getVotingPIN());
	
	VotersAdhaarUserBean enrolledUser= new VotersAdhaarUserBean();
	enrolledUser.setVotingPIN("CHANGED PIN");
	enrolledUser.setCustomMessage(CUSTOM_MSG);
	return enrolledUser;
    }
    
    
}
